// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  chats     Chat[]   @relation(fields: [chatIDs], references: [id])
  chatIDs   String[] @db.ObjectId
  posts Post[]
  savedPosts SavedPost[]
}
model Post {
  id         String @id @default(auto()) @map("_id") @db.ObjectId 
  title       String 
  price       Int 
  images     String[]
  address     String
  city        String
  bedroom     String
  bathroom    Int
  latitude    String
  longitude   String
  type        Type
  property    Property
  createdAt DateTime @default(now())
  user User @relation(fields: [userId],references: [id])
  userId String  @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
}
enum Type{
  buy
  rent
}


enum Property{
  apartment
  house
  condo
  land
}


//post details 
model PostDetail {
 id String @id @default(auto()) @map("_id") @db.ObjectId

descriptions String
utilities    String?

petPol       String?

income       String?

size         Int?

school       Int?
bus          Int?

restarurant  Int? 

post Post @relation(fields: [postId],references: [id])
postId String @db.ObjectId @unique

}


model SavedPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  userId String @db.ObjectId @unique
  postId String @db.ObjectId @unique
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}


model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIDs], references: [id])
  userIDs     String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  message     Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatIDs], references: [id])
  chatIDs   String   @db.ObjectId
  createdAt DateTime @default(now())
}


